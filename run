#!/bin/bash

# conf file is where everything else is defined.
source conf

# Gathiring run time arguments.
CLEAN=false
HOST_PREP=false
UC_INSTALL=false                                                       
OC_PREP=false                                                             
OC_DEPLOY=false                                                        
RUN_TESTS=false                                                        
BCK_RES=false

case "$1" in
    -h)
        echo -ne $HELP && exit 0 ;;
    --help)
        echo -ne $HELP && exit 0 ;;
    --clean)
        CLEAN=true ;;
    --hp)
        HOST_PREP=true ;;
    --uc)
        UC_INSTALL=true ;;
    --op)
        OC_PREP=true ;;
    --oc)
        OC_DEPLOY=true ;;
    --test)
        RUN_TESTS=true ;;
    --bnr)
        BCK_RES=true ;;
    --full)
        CLEAN=true
        HOST_PREP=true
        UC_INSTALL=true
        OC_PREP=true
        OC_DEPLOY=true
        RUN_TESTS=true
        BCK_RES=true
        ;;
    *)
        echo -ne $HELP && exit 0 ;;
esac

# Almost nothing happens here, all the functions are defined elsewhere.
echo "Adding functions."
for file in $(ls functions/*.sh)
do
    source $file
done

# Setting current location and recreating the work folder.
CWD=$(pwd)
if [ ! -d $WORK_DIR ]
then
    mkdir -p $WORK_DIR
fi
cd $WORK_DIR
echo "Work dir: $(pwd)"

START=$(date +%s)

# This is where functions are executed.
run ()
{
    echo "[$(date +%T)] Running $1 $2" | tee -a $LOG_FILE
    SECONDS=0
    $1
    echo "$1 finished with no errors and ran for $(time_diff $SECONDS)" | tee -a $LOG_FILE
}

host_clean ()
{
    run clean
    run clean_vms                                                             
    run clean_vnets                                                           
    run clean_pool
    run clean_vbmcp
}

host_preprerations ()
{
    # Editing the host prior to do anything else.
    run install_host_packages "$LONG"
    run install_extra_packages
    run "discover_puddle_version $OS_VER"
    run set_puddle_params
    run update_os "$LONG"
    run host_tweaks
    run fix_host_ssh
    run fix_virt_access
    run fix_host_kvm
    run add_user_stack
    echo -e "Prepared host after $(time_diff $(( $(date +%s) - $START)))\n"
}

virt_setup ()
{
    # Re-creating virtual resources.
    run restart_libvirt
    run create_vnet
    echo -e "Cleaned old resources after $(time_diff $(( $(date +%s) - $START)))\n"
}

create_installation_images ()
{
    # If no installation images are available, create them for the requested version.
    if $CREATE_IMAGES
    then
        run get_ntpd_settings
        run proto_create
        run proto_prerun
        run proto_firstrun
        run proto_start "$LONG"
        run proto_clean
        run "clean_vms proto"
        run $OBTAIN_IMAGES "$LONG"
        run package_puddle_images
        run upload_puddle
        echo -e "Created installation images after $(time_diff $(( $(date +%s) - $START)))\n"
    fi
}

create_virtual_environment ()
{
    # Creating the virtual environment as set in conf.
    run get_undercloud_image
    run create_node_images
    run define_nodes
    run "undercloud_firstboot ${NODES[0]}-0"
    echo -e "Creates virtual environment after $(time_diff $(( $(date +%s) - $START)))\n"
}

install_main_undercloud ()
{
    # Installing the main Undercloud machine.
    run "vm_power ${NODES[0]}-0 start" "$LONG"
    run "undercloud_wait ${NODES[0]}-0" "$LONG"
    run "undercloud_ssh_access ${NODES[0]}-0 root $ROOT_PASS"
    run "undercloud_ssh_access ${NODES[0]}-0 stack stack"
    run "undercloud_install ${NODES[0]}-0" "$LONG"
    echo -e "Undercloud installed after $(time_diff $(( $(date +%s) - $START)))\n"
}

predeploy_overcloud ()
{
    # Running steps prior to deploying the Overcloud.
    run "fetch_vbmc ${NODES[0]}-0"
    run "define_flavors ${NODES[0]}-0"
    run "create_json ${NODES[0]}-0"
    run assign_vbmc
    run "add_templates ${NODES[0]}-0"
    run "overcloud_predeploy ${NODES[0]}-0" "$LONG"
    echo -e "Finished deployment preperations after $(time_diff $(( $(date +%s) - $START)))\n"
}

deploy_overcloud ()
{
    # Running overcloud deploy and waiting for deployment to finish.
    run "overcloud_deploy ${NODES[0]}-0"
    run "overcloud_wait ${NODES[0]}-0" "$LONG"
    run "populate_hosts ${NODES[0]}-0"
    echo -e "Overcloud deployed after $(time_diff $(( $(date +%s) - $START)))\n"
}

undercloud_backup ()
{
    # Backup the main Undercloud machine.
    run "backup_undercloud ${NODES[0]}-0"
    run "vm_power ${NODES[0]}-0 stop"
    echo -e "Undercloud backed up after $(time_diff $(( $(date +%s) - $START)))\n"
}

undercloud_restore ()
{
    # Restoring the old Undercloud data onto a new Undercloud machine.
    run "upload_backup ${NODES[0]}-1"
    run "undercloud_firstboot ${NODES[0]}-1"
    run "vm_power ${NODES[0]}-1 start" "$LONG"
    run "undercloud_wait ${NODES[0]}-1" "$LONG"
    run "undercloud_ssh_access ${NODES[0]}-1 root $ROOT_PASS"
    run "undercloud_ssh_access ${NODES[0]}-1 stack stack"
    run "restore_undercloud ${NODES[0]}-1"
    run "undercloud_install ${NODES[0]}-1" "$LONG"
    run "populate_hosts ${NODES[0]}-1"
    echo -e "Undercloud restored after $(time_diff $(( $(date +%s) - $START)))\n"
}

run_automation ()
{
    # Run automation tests
    run "run_tests $1 stack overcloud"
}

if $CLEAN; then host_clean; fi

if $HOST_PREP
then
    host_preprerations
    virt_setup
    create_installation_images
    create_virtual_environment
fi

if $UC_INSTALL; then install_main_undercloud; fi
if $OC_PREP; then predeploy_overcloud; fi
if $OC_DEPLOY; then deploy_overcloud; fi

if $BCK_RES
then
    undercloud_backup
    undercloud_restore
fi

if $RUN_TESTS; then run_automation ${NODES[0]}-0; fi

echo "ALL DONE in $(time_diff $(( $(date +%s) - $START)))"
